{"version":3,"sources":["components/Navbar/index.js","components/Header/index.js","components/Card/index.js","components/Body/index.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","props","className","id","score","bestScore","Header","notification","Card","onClick","clicked","data-clicked","data-id","src","process","image","alt","name","Body","state","scooby","message","shuffle","arr","sort","Math","random","correctGuess","newScooby","map","character","newScore","newBestScore","setState","incorrectGuess","handleClick","this","key","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"o0CAkBeA,MAff,SAAgBC,GACd,OACE,yBAAKC,UAAU,iBACb,yBAAKA,UAAU,SAASC,GAAG,UACzB,wBAAID,UAAU,iBAAd,eACA,6BACE,wBAAIA,UAAU,cAAd,kBACkBD,EAAMG,MADxB,kBAC8CH,EAAMI,e,MCE/CC,MATf,SAAgBL,GACd,OACE,yBAAKC,UAAU,iBACb,8CACA,4BAAKD,EAAMM,gB,MCWFC,MAff,SAAcP,GACZ,OACE,yBACEC,UAAU,OACVO,QAAS,kBAAMR,EAAMQ,QAAQR,EAAME,GAAIF,EAAMS,UAC7CC,eAAcV,EAAMS,QACpBE,UAASX,EAAME,IAEf,yBAAKD,UAAU,iBACb,yBAAKW,IAAKC,UAAyBb,EAAMc,MAAOb,UAAU,WAAWc,IAAKf,EAAMgB,U,OC+EzEC,G,kNAnFbC,MAAQ,CACNC,SACAhB,MAAO,EACPC,UAAW,EACXgB,QAAS,4B,EAGXC,QAAU,SAACC,GAET,OADAA,EAAIC,MAAK,kBAAMC,KAAKC,SAAW,MACxBH,G,EAOTI,aAAe,SAACxB,GAEd,IAAIyB,EAAY,EAAKT,MAAMC,OAAOS,KAAI,SAACC,GAIrC,OAHIA,EAAU3B,KAAOA,IACnB2B,EAAUpB,SAAWoB,EAAUpB,SAE1BoB,KAGLC,EAAW,EAAKZ,MAAMf,MAAQ,EAG9B4B,EAAe,EAAKb,MAAMd,UACxB0B,GAAYC,GAChBA,IAIF,EAAKC,SAAS,CACZb,OAAQ,EAAKE,QAAQM,GACrBxB,MAAO2B,EACP1B,UAAW2B,EACXX,QAAS,kC,EAIba,eAAiB,SAACF,GAChB,IAAIJ,EAAY,EAAKT,MAAMC,OAAOS,KAAI,SAACC,GAIrC,OAHIA,EAAUpB,UACZoB,EAAUpB,SAAU,GAEfoB,KAGT,EAAKG,SAAS,CACZb,OAAQ,EAAKE,QAAQM,GACrBxB,MAAO,EACPiB,QAAS,oBACThB,UAAW2B,K,EAIfG,YAAc,SAAChC,EAAIO,GAAL,OACZA,EAAU,EAAKwB,eAAe,EAAKf,MAAMd,WAAa,EAAKsB,aAAaxB,I,kEA9CxEiC,KAAKH,SAAS,CAAEb,OAAQgB,KAAKd,QAAQc,KAAKjB,MAAMC,Y,+BAgDxC,IAAD,OACP,OACE,oCACE,kBAAC,EAAD,CAAQhB,MAAOgC,KAAKjB,MAAMf,MAAOC,UAAW+B,KAAKjB,MAAMd,YACvD,kBAAC,EAAD,CAAQE,aAAc6B,KAAKjB,MAAME,UACjC,yBAAKnB,UAAU,kBACZkC,KAAKjB,MAAMC,OAAOS,KAAI,SAACC,GAAD,OACrB,kBAAC,EAAD,CACErB,QAAS,EAAK0B,YACdhC,GAAI2B,EAAU3B,GACdkC,IAAKP,EAAU3B,GACfc,KAAMa,EAAUb,KAChBF,MAAOe,EAAUf,MACjBL,QAASoB,EAAUpB,mB,GA3Ed4B,c,MCMJC,MARf,WACE,OACE,oCACE,kBAAC,EAAD,QCIcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAMnC,c","file":"static/js/main.666671c3.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./style.css\";\n\nfunction Navbar(props) {\n  return (\n    <div className=\"nav-container\">\n      <nav className=\"navbar\" id=\"navbar\">\n        <h5 className=\"navbar-brand \">Clicky Game</h5>\n        <div>\n          <h5 className=\"user-score\">\n            Current Score: {props.score} - Best Score: {props.bestScore}\n          </h5>\n        </div>\n      </nav>\n    </div>\n  );\n}\n\nexport default Navbar;\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction Header(props) {\n  return (\n    <div className=\"jumbo-wrapper\">\n      <h1>Clicky Game!!!</h1>\n      <h3>{props.notification}</h3>\n    </div>\n  );\n}\n\nexport default Header;\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction Card(props) {\n  return (\n    <div\n      className=\"card\"\n      onClick={() => props.onClick(props.id, props.clicked)}\n      data-clicked={props.clicked}\n      data-id={props.id}\n    >\n      <div className=\"img-container\">\n        <img src={process.env.PUBLIC_URL + props.image} className=\"card-img\" alt={props.name} />\n      </div>\n    </div>\n  );\n}\n\nexport default Card;\n","import React, { Component } from \"react\";\nimport Navbar from \"../Navbar\";\nimport Header from \"../Header\";\nimport Card from \"../Card\";\nimport scooby from \"../../scooby.json\";\nimport \"./style.css\";\n\nclass Body extends Component {\n  state = {\n    scooby,\n    score: 0,\n    bestScore: 0,\n    message: \"Click an image to start!\",\n  };\n\n  shuffle = (arr) => {\n    arr.sort(() => Math.random() - 0.5);\n    return arr;\n  };\n\n  componentDidMount() {\n    this.setState({ scooby: this.shuffle(this.state.scooby) });\n  }\n\n  correctGuess = (id) => {\n    // create a new array with the clicked character.clicked changed to true\n    let newScooby = this.state.scooby.map((character) => {\n      if (character.id === id) {\n        character.clicked = !character.clicked;\n      }\n      return character;\n    });\n\n    let newScore = this.state.score + 1;\n\n    // bestScore handler\n    let newBestScore = this.state.bestScore;\n    if (!(newScore <= newBestScore)) {\n      newBestScore++;\n    }\n\n    // set the new state after each correct guess\n    this.setState({\n      scooby: this.shuffle(newScooby),\n      score: newScore,\n      bestScore: newBestScore,\n      message: \"That's correct! Guess again.\",\n    });\n  };\n\n  incorrectGuess = (newBestScore) => {\n    let newScooby = this.state.scooby.map((character) => {\n      if (character.clicked) {\n        character.clicked = false;\n      }\n      return character;\n    });\n\n    this.setState({\n      scooby: this.shuffle(newScooby),\n      score: 0,\n      message: \"That's incorrect!\",\n      bestScore: newBestScore,\n    });\n  };\n\n  handleClick = (id, clicked) =>\n    clicked ? this.incorrectGuess(this.state.bestScore) : this.correctGuess(id);\n\n  render() {\n    return (\n      <>\n        <Navbar score={this.state.score} bestScore={this.state.bestScore} />\n        <Header notification={this.state.message} />\n        <div className=\"card-container\">\n          {this.state.scooby.map((character) => (\n            <Card\n              onClick={this.handleClick}\n              id={character.id}\n              key={character.id}\n              name={character.name}\n              image={character.image}\n              clicked={character.clicked}\n            />\n          ))}\n        </div>\n      </>\n    );\n  }\n}\n\nexport default Body;\n","import React from \"react\";\nimport Body from \"./components/Body\";\n\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <>\n      <Body />\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}